apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {

        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
                arguments = [moduleName: project.getName()]
            }
        }

        ndk {
            // 选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: rootProject.ext.applicationId,
                JPUSH_APPKEY : "71e0d4688bcb8b4da3718630", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]


        multiDexEnabled true
    }


    signingConfigs {
        config {
            storeFile file('../keystore.jks')
            storePassword "wzcd123456"
            keyAlias "wzcd"
            keyPassword "wzcd123456"
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${rootProject.ext.packageName}_${rootProject.ext.android["versionName"]}_${releaseTime()}.apk"
                }
            }
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
            buildConfigField "boolean", "LOG_DEBUG", "true"
        }
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

///格式化打完完成后APK名称中的时间
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC+8"))
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    api project(':cdcommon')

    // multidex
    implementation 'com.android.support:multidex:1.0.3'

    annotationProcessor rootProject.ext.arouterCompiler
    implementation rootProject.ext.arouterApi

    //二维码扫描
    compile 'cn.yipianfengye.android:zxing-library:2.2'

}
